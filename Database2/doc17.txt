As the popularity of the Web exploded, HTML’s limitations became apparent. HTML’s lack of extensibility (the ability to change or add features) frustrated developers, and its ambiguous
definition allowed erroneous HTML to proliferate. In response to these problems, the W3C added limited extensibility to HTML. This was, however, only a temporary solu-tion—the need for a standardized, fully extensible and structurally strict language was apparent.
As a result, XML was developed by the W3C. XML combines the power and extensibility of its parent language, Standard Generalized Markup Language (SGML), with
the simplicity that the Web community demands. At the same time, the W3C began developing
XML-based standards for style sheets and advanced hyperlinking. Extensible Stylesheet Language (XSL) incorporates elements of both Cascading Style Sheets (CSS), which is used to format HTML documents and Document Style and Semantics Specification
Language (DSSSL), which is used to format SGML documents. Similarly, the Extensible
Linking Language (XLink) combines ideas from HyTime and the Text Encoding Initiative (TEI), to provide extensible linking of resources.
Data independence, the separation of content from its presentation, is the essential characteristic of XML. Because an XML document describes data, any application conceivably
can process an XML document. Recognizing this, software developers are integrating
XML into their applications to improve Web functionality and interoperability. XML’s flexibility and power make it perfect for the middle tier of client/server systems, which must interact with a wide variety of clients. Much of the processing that was once limited to server computers now can be performed by client computers, because XML’s semantic and structural information enables it to be manipulated by any application that can process text. This reduces server loads and network traffic, resulting in a faster, more efficient
Web.
XML is not limited to Web applications. Increasingly, XML is being employed in data-bases—the structure of an XML document enables it to be integrated easily with database applications. As applications become more Web enabled, it seems likely that XML will become the universal technology for data representation. All applications employing XML would be able to communicate, provided that they could understand each other’s XML markup, or vocabulary.
Simple Object Access Protocol (SOAP) is a technology for the distribution of objects (marked up as XML) over the Internet. Developed primarily by Microsoft and Develop-Mentor, SOAP provides a framework for expressing application semantics, encoding that data and packaging it in modules. SOAP has three parts: The envelope, which describes the content and intended recipient of a SOAP message; the SOAP encoding rules, which are XML-based; and the SOAP Remote Procedure Call (RPC) representation for commanding other computers to perform a task. Microsoft .NET (discussed in the next two sections) uses XML and SOAP to mark up and transfer data over the Internet. XML and SOAP are at the core of .NET—they allow software components to interoperate (i.e., communicate easily with one another). SOAP is supported by many platforms, because of its foundations in XML and HTTP. We discuss XML in Chapter 18, Extensible Markup Language (XML) and SOAP in Chapter 21, ASP .NET and Web Services.