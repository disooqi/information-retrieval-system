During the 1960s, many large software-development efforts encountered severe difficulties.
Development typically ran behind schedule, costs greatly exceeded budgets and the finished products were unreliable. People began to realize that software development was a far more complex activity than they had imagined. Research activity, intended to address these issues, resulted in the evolution of structured programming—a disciplined approach to the creation of programs that are clear, demonstrably correct and easy to modify.
One of the more tangible results of this research was the development of the Pascal programming language in 1971. Pascal, named after the seventeenth-century mathematician
and philosopher Blaise Pascal, was designed for teaching structured programming in academic environments and rapidly became the preferred introductory programming language
in most universities. Unfortunately, because the language lacked many features needed to make it useful in commercial, industrial and government applications, it was not widely accepted in these environments. By contrast, C, which also arose from research on structured programming, did not have the limitations of Pascal, and programmers quickly adopted it.
The Ada programming language was developed under the sponsorship of the United States Department of Defense (DOD) during the 1970s and early 1980s. Hundreds of programming
languages were being used to produce DOD’s massive command-and-control software systems. DOD wanted a single language that would meet its needs. Pascal was chosen as a base, but the final Ada language is quite different from Pascal. The language
was named after Lady Ada Lovelace, daughter of the poet Lord Byron. Lady Lovelace is generally credited with writing the world’s first computer program, in the early 1800s (for the Analytical Engine mechanical computing device designed by Charles Babbage). One important capability of Ada is multitasking, which allows programmers to specify that many activities are to occur in parallel. As we will see in Chapter 14, C# offers a similar capability, called multithreading.