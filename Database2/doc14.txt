As high-level languages develop, new offerings build on aspects of their predecessors. C++ evolved from C, which in turn evolved from two previous languages, BCPL and B. Martin Richards developed BCPL in 1967 as a language for writing operating systems, software and compilers. Ken Thompson modeled his language, B, after BCPL. In 1970, Thompson used B to create early versions of the UNIX operating system. Both BCPL and B were “typeless” languages, meaning that every data item occupied one “word” in memory. Using these languages, programmers assumed responsibility for treating each data item as a whole number or real number, for example.
The C language, which Dennis Ritchie evolved from B at Bell Laboratories, was originally
implemented in 1973. Although C employs many of BCPL and B’s important concepts,
it also offers data typing and other features. C first gained widespread recognition as
a development language of the UNIX operating system. However, C is now available for most computers, and many of today’s major operating systems are written in C or C++. C is a hardware-independent language, and, with careful design, it is possible to write C programs
that are portable to most computers.
C++, an extension of C using elements from Simula 67, a simulation programming language,
was developed by Bjarne Stroustrup in the early 1980s at Bell Laboratories. C++ provides a number of features that “spruce up” the C language, but, more importantly, it provides capabilities for object-oriented programming (OOP).
At a time when demand for new and more powerful software is soaring, the ability to build software quickly, correctly and economically remains an elusive goal. However, this problem can be addressed in part through the use of objects, or reusable software components
that model items in the real world (see Section 1.11). Software developers are discovering
that a modular, object-oriented approach to design and implementation can make software development groups much more productive than is possible via previous popular programming techniques, such as structured programming. Furthermore, object-oriented programs are often easier to understand, correct and modify.
In addition to C++, many other object-oriented languages have been developed. These include Smalltalk, which was created at Xerox's Palo Alto Research Center (PARC). Smalltalk is a pure object-oriented language, which means that literally everything is an object. C++ is a hybrid language—it is possible to program in a C-like style, an object-ori-ented style or both. Although some perceive this range of options as a benefit, most programmers
today believe that it is best to program in a purely object-oriented manner.
Developing Microsoft Windows-based applications in languages such as C and C++, however, proved to be a difficult and cumbersome process. When Bill Gates founded Microsoft Corporation, he implemented BASIC on several early personal computers. BASIC (Beginner’s All-Purpose Symbolic Instruction Code) is a programming language developed in the mid-1960s by Professors John Kemeny and Thomas Kurtz of Dartmouth College as a language for writing simple programs. BASIC’s primary purpose was to familiarize
novices with programming techniques. The natural evolution from BASIC to Visual Basic was introduced in 1991 as a result of the development of the Microsoft Windows graphical user interface (GUI) in the late 1980s and the early 1990s.
Although Visual Basic is derived from the BASIC programming language, it is a distinctly
different language that offers such powerful features as graphical user interfaces, event handling, access to the Windows 32-bit Application Programming Interface (Win32 API), object-oriented programming and error handling. Visual Basic is one of the most popular
event-driven, visual programming interfaces.
The latest version of Visual Basic, called Visual Basic .NET1, is designed for Microsoft’s new programming platform, .NET. Earlier versions of Visual Basic provided object-oriented capabilities, but Visual Basic .NET offers enhanced object orientation and makes use of the powerful library of reusable software components in .NET.
Around the same time that Visual Basic was being developed, many individuals projected
that intelligent consumer-electronic devices would be the next major market in which microprocessors would have a profound impact. Recognizing this, Sun Microsystems
in 1991 funded an internal corporate research project code-named Green. The project
resulted in the development of a language based on C and C++. Although the language’s creator, James Gosling, called it Oak (after an oak tree outside his window at Sun), it was later discovered that a computer language called Oak already existed. When a group of Sun employees visited a local coffee place, the name Java was suggested, and it stuck.
Unfortunately, the Green project ran into some difficulties. The marketplace for intelligent
consumer-electronic devices was not developing as quickly as Sun had anticipated. Worse yet, a major contract for which Sun competed was awarded to another company. The project was, at this point, in danger of being canceled. By sheer good fortune, the World Wide Web exploded in popularity in 1993, and Sun saw immediate potential for using Java to design dynamic content (i.e., animated and interactive content) for Web pages.
Sun formally announced Java at a conference in May 1995. Ordinarily, an event like this would not generate much publicity. However, Java grabbed the immediate attention of the business community because of the new, widespread interest in the World Wide Web. Developers now use Java to create Web pages with dynamic content, to build large-scale enterprise applications, to enhance the functionality of World Wide Web servers (the computers
that provide the content distributed to our Web browsers when we browse Web sites), to provide applications for consumer devices (e.g., cell phones, pagers and PDAs) and for many other purposes.